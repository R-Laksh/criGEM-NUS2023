import os
import pathlib
from typing import Optional
from fastapi import FastAPI

from cassandra.cqlengine.management import sync_table

from . import (
    config, 
    db, 
    models,
    ml
)

app = FastAPI()
settings = config.get_settings()

BASE_DIR = pathlib.Path(__file__).resolve().parent

MODEL_DIR = BASE_DIR.parent / "models"
OTTER_MODEL_DIR = MODEL_DIR / "otter"
MODEL_PATH = OTTER_MODEL_DIR / "spam-model.h5"
TOKENIZER_PATH = OTTER_MODEL_DIR / "spam-classifer-tokenizer.json"
METADATA_PATH = OTTER_MODEL_DIR / "spam-classifer-metadata.json"

AI_MODEL = None
DB_SESSION = None
OTTERInference = models.OTTERInference

@app.on_event("startup")
def on_startup():
    global AI_MODEL, DB_SESSION
    AI_MODEL = ml.AIModel(
        model_path= MODEL_PATH,
        tokenizer_path = TOKENIZER_PATH,
        metadata_path = METADATA_PATH
    )
    DB_SESSION = db.get_session()
    sync_table(OTTERInference)
    

@app.get("/") 
def read_index(q:Optional[str] = None):
    global AI_MODEL
    query = q or "AUGACUGUCGGUAGCUUUCUUGAGUUCGGUACGUCGGCGUAGCGAGGUUUAUCCACUUCUCAGUUGUGUGUGUGUGUAGCGAUCCGUUCCGAGUGGGUGGUUUGUUUUUUGAGGUGAGGUCGAGGCUCCUUUUGCUUUUGUGUGUGUUUUUUUGUCCUGUUUUUUGUUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUCCGUGUUGUUUGUUUUUUGUGUGUGUUUUUGUAGGACUUCGAGGAGACUACGUGAACGUAGGCGCUUCGGUGACGGCCUCCGAGCUGGUCUGAUGGUGACUCCUGUUCUGAGGUGCUUCAUCUUGUGUGUUGAGUCAGUCGGUCGCGGGACUGUGUUGUGUGUGUGUAGAGGGGUGUGUGUGUUGUGUCUUGCUUUUUGUGUUGUGUGUGUGUGUGUGUGUGUGUAGUUCAGAGGUUCAGCUCGGCUUGAUGACCUUGUGUGUGUGUGUGUGUGUGUGUAGCUUUUUUUUGUGUGUGUUCUUUGUUUUUUCUCCUUGUGUGUGUAGUGUAGCUGUAGUUUCUGUCUCUGUUGUUCUGUAGAGUGUGUGUUUGUUUUUUGUGUUGUGUGUUGUGUGUGUGUGUUGUGUGUUGUUUGUUUUGUUUUUUGUGUUGUGUGUGUGUUGUGUGUGUGUGUUGUGUGUUGUUUGUUUUGUUUUUUGUUUUUUUUUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGUGGGGUUURUGGUUUUUCUGGUGUUUUGGGUGUUUCUAAUUCUGUGGUCGGCCAAUAACUUCCAUUCAAACUAUCCUUUGGCGGUAGGAAAGGUAAGGUUGCUUUGGGCGUUAAGCCCGUGUUCUGUAAACUUCUAUUGGGCUACGGAAAGGAACACACCUUGUGAAGAAAGGAACACCUUGUUGUGAAUUUUGUCUCCUGGGGUGGAUAGGCUUCGUGUAGGGAAGAGGAACUUGGGUCUGAGAUGGAAUGUGUGUGUUUGAAGGUAAGGAAUUAUUGGGUUCGUGUACCUUGAAUGAGGUUUGUUCUUUUGAGUUUCGGGAAAGUUUUGGUUGGAACAUUUUUGUUGGGGUGUUUGUUUUUUUCUGGGUGUUUUUGGUUUCUUGUUUGGGAGAGUAGGCUUGGGUGUGGUUUUUUGGUUGGCUAGGAAGGACUUGUGGGUUUUGGGUUCUUUUCUAAGGGAAAGGAAAGAAAGGACUUGGGGGGAAACCCGUGGACACCGGGGAGGUUGUGGUGUGUGUUUUCGAGGUCUGAGGUGUGGUUGUGGCUUCGUUGUGUGGUGUGUUGGAAAGUUUUUUUUGUUGUGUCCGUGUGGUGUUGUGUGUUGUUUGGCUUGGAAACCUUGUUCUUGUGGUCUAGGUGGGAUUGGUUUUUUGGUUUCUUCUUUCUAAGUGUAAUGGGUGGUGUUGGGUUGUGGUGUGUGUGGAAUGAAAGGUGGAAUGAAGGUCUGAAGUUUGUCCUGUGUGUGUUUGUGUGUGUUGUUUUUUGUGUUGGUUGGAAAGGGAUUCGUGUUGUGUUGUGUAAACCUUUGUUGGAAUUGUUCUGUUGGAGGUCUUGGUCUUGGUGUGUGUGUGUGUUGUUGUUUUGUUCGUCGUCG"
    preds_dict = AI_MODEL.predict_text(query)
    # NoSQL -> cassandra -> DataStax AstraDB
    return {"RNA Sequence": query, "Binding Score":preds_dict}