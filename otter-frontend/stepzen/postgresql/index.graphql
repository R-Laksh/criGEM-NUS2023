type Comment {
  created_at: DateTime
  id: ID!
  name: String
  post: Post @materializer(query: "postUsingComment_post_id_fkey")
  post_id: ID
  text: String
}

type Post {
  body: String
  comment: [Comment] 
    @materializer(
      query: "getCommentByPostId",
      arguments: [{ name: "post_id", field: "id" }]
    )
  created_at: DateTime
  id: ID!
  image: String
  name: String
  space: [Space] 
    @materializer(
      query: "getSpaceListById",
      arguments: [{ name: "id", field: "space_id" }]
    )
  space_id: ID
  title: String
  votes: [Vote] 
    @materializer(
      query: "getVotesByPostId",
      arguments: [{ name: "post_id", field: "id" }]
    )
}


type Space {
  created_at: DateTime
  id: ID!
  post: [Post] @materializer(query: "postUsingPost_space_id_fkey")
  topic: String
}

type Vote {
  created_at: DateTime!
  id: ID!
  name: String
  post: Post @materializer(query: "postUsingVote_post_id_fkey")
  post_id: ID
  upvote: Boolean
}

"""
The following queries are just a set of examples of how to access your schema.
Feel free to modify them or aggregate more.
"""
type Query {
  " Queries for type 'Comment' "

  getCommentByPostId(post_id: ID!): [Comment]
  @dbquery(
    type: "postgresql"
    query: """
    SELECT * from "comment" where "post_id" = $1
    """
    configuration: "postgresql_config"
  )
  comment(id: ID!): Comment
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comment"
      configuration: "postgresql_config"
    )
  commentList: [Comment]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comment"
      configuration: "postgresql_config"
    )
  commentPaginatedList(first: Int, after: Int): [Comment]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "name", "post_id", "text" FROM "comment" ORDER BY "id" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
  commentUsingComment_post_id_fkey(id: ID!): [Comment]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "name", "post_id", "text" FROM "comment" WHERE "post_id" = $1
      """
      configuration: "postgresql_config"
    )
  " Queries for type 'Post' "
  post(id: ID!): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "post"
      configuration: "postgresql_config"
    )
  postList: [Post]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT * FROM "post"
      ORDER BY "post". "created_at" DESC
      """
      configuration: "postgresql_config"
    )

  getPostListByPostID(post_id: ID!) : Post
  @dbquery(
    type: "postgresql"
    query: """
    SELECT * FROM "post"
    WHERE "post"."id" = $1
    """
    configuration: "postgresql_config"
  )
  
  getPostListByTopic(topic: String!): [Post]
    @dbquery(
      type: "postgresql"
      query: """
      SELECT *, "post".ID AS ID FROM "post"
      JOIN "space" ON "space", "id" = "post"."space_id"
      WHERE "space", "topic" = $1
      ORDER BY "post", "created_at" DESC
      """
    )
  postPaginatedList(first: Int, after: Int): [Post]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "body", "created_at", "id", "image", "name", "space_id", "title" FROM "post" ORDER BY "id" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
  postUsingComment_post_id_fkey(post_id: ID!): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "body", "created_at", "id", "image", "name", "space_id", "title" FROM "post" WHERE "id" = $1
      """
      configuration: "postgresql_config"
    )
  postUsingPost_space_id_fkey(id: ID!): [Post]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "body", "created_at", "id", "image", "name", "space_id", "title" FROM "post" WHERE "space_id" = $1
      """
      configuration: "postgresql_config"
    )
  postUsingVote_post_id_fkey(post_id: ID!): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "body", "created_at", "id", "image", "name", "space_id", "title" FROM "post" WHERE "id" = $1
      """
      configuration: "postgresql_config"
    )
  " Queries for type 'Space' "
  space(id: ID!): Space
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "space"
      configuration: "postgresql_config"
    )
  getSpaceListByTopic(topic: String!): [Space]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT * from "space" where "topic" = $1
      """
      configuration: "postgresql_config"
    )

  getSpaceListById(id: ID!): [Space]
    @dbquery(
      type: "postgresql"
      query: """
      SELECT * from "space" where "id" = $1
      """
      configuration: "postgresql_config"
    )

  spaceList: [Space]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "space"
      configuration: "postgresql_config"
    )
  spacePaginatedList(first: Int, after: Int): [Space]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "topic" FROM "space" ORDER BY "id" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
  spaceUsingPost_space_id_fkey(space_id: ID!): Space
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "topic" FROM "space" WHERE "id" = $1
      """
      configuration: "postgresql_config"
    )
  spaceUsingspace_created_at_key(created_at: DateTime!): Space
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "topic" FROM "space" WHERE "created_at" = $1
      """
      configuration: "postgresql_config"
    )
  " Queries for type 'Vote' "
  getVotesByPostId(post_id: ID!): [Vote]
    @dbquery(
      type: "postgresql"
      query: """
      SELECT * FROM "vote" WHERE "post_id" = $1
      ORDER BY "created_at" DESC
      """
      configuration: "postgresql_config"
    )
  vote(id: ID!): Vote
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "vote"
      configuration: "postgresql_config"
    )
  voteList: [Vote]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "vote"
      configuration: "postgresql_config"
    )
  votePaginatedList(first: Int, after: Int): [Vote]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "name", "post_id", "upvote" FROM "vote" ORDER BY "id" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
  voteUsingVote_post_id_fkey(id: ID!): [Vote]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "name", "post_id", "upvote" FROM "vote" WHERE "post_id" = $1
      """
      configuration: "postgresql_config"
    )
}

"""
The following mutations are just a set of examples of how to access your schema.
Feel free to modify them or aggregate more.
"""
type Mutation {
  " Mutations for type 'Comment' "
  deleteComment(id: ID!): Comment
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comment"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertComment(
    name: String!
    post_id: ID!
    text: String!
  ): Comment
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "comment"
      dml: INSERT
      configuration: "postgresql_config"
    )
  updateComment(
    id: ID!
    created_at: DateTime
    name: String
    post_id: ID
    text: String
  ): Comment
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      UPDATE "comment" SET
        "created_at" = COALESCE($2, "created_at"),
        "name" = COALESCE($3, "name"),
        "post_id" = COALESCE($4, "post_id"),
        "text" = COALESCE($5, "text")
      WHERE
        "id" = $1
      RETURNING *
      """
      configuration: "postgresql_config"
    )
  " Mutations for type 'Post' "
  deletePost(id: ID!): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "post"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertPost(
    body: String
    name: String
    created_at: DateTime
    title: String
    space_id: ID
  ): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "post"
      dml: INSERT
      configuration: "postgresql_config"
    )
  updatePost(
    id: ID!
    body: String
    created_at: DateTime
    image: String
    name: String
    space_id: ID
    title: String
  ): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      UPDATE "post" SET
        "body" = COALESCE($2, "body"),
        "created_at" = COALESCE($3, "created_at"),
        "image" = COALESCE($4, "image"),
        "name" = COALESCE($5, "name"),
        "space_id" = COALESCE($6, "space_id"),
        "title" = COALESCE($7, "title")
      WHERE
        "id" = $1
      RETURNING *
      """
      configuration: "postgresql_config"
    )
  " Mutations for type 'Space' "
  deleteSpace(id: ID!): Space
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "space"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertSpace(topic: String, created_at: DateTime): Space
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "space"
      dml: INSERT
      configuration: "postgresql_config"
    )
  updateSpace(id: ID!, created_at: DateTime, topic: String): Space
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      UPDATE "space" SET
        "created_at" = COALESCE($2, "created_at"),
        "topic" = COALESCE($3, "topic")
      WHERE
        "id" = $1
      RETURNING *
      """
      configuration: "postgresql_config"
    )
  " Mutations for type 'Vote' "
  deleteVote(id: ID!): Vote
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "vote"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertVote(
    name: String!
    post_id: ID!
    created_at: DateTime!
    upvote: Boolean!
  ): Vote
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "vote"
      dml: INSERT
      configuration: "postgresql_config"
    )
  updateVote(
    id: ID!
    created_at: DateTime
    name: String
    post_id: ID
    upvote: Boolean
  ): Vote
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      UPDATE "vote" SET
        "created_at" = COALESCE($2, "created_at"),
        "name" = COALESCE($3, "name"),
        "post_id" = COALESCE($4, "post_id"),
        "upvote" = COALESCE($5, "upvote")
      WHERE
        "id" = $1
      RETURNING *
      """
      configuration: "postgresql_config"
    )
}
